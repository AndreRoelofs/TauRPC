#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::{sync::Arc, time::Duration};
use tauri::{AppHandle, Manager, Runtime, Window};
use taurpc::{Router, Windows};
use tokio::{
    sync::{oneshot, Mutex},
    time::sleep,
};
///Doc comments are also generated
struct User {
    /// The user's id
    uid: i32,
    /// The user's first name
    first_name: String,
    /// The user's last name
    last_name: String,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for User {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "User",
                false as usize + 1 + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(&mut __serde_state, "uid", &self.uid)?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "first_name",
                &self.first_name,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "last_name",
                &self.last_name,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for User {
        fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "field identifier")
                }
                fn visit_u64<__E>(self, __value: u64) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "uid" => _serde::__private::Ok(__Field::__field0),
                        "first_name" => _serde::__private::Ok(__Field::__field1),
                        "last_name" => _serde::__private::Ok(__Field::__field2),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"uid" => _serde::__private::Ok(__Field::__field0),
                        b"first_name" => _serde::__private::Ok(__Field::__field1),
                        b"last_name" => _serde::__private::Ok(__Field::__field2),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<User>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = User;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct User")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<i32>(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(_serde::de::Error::invalid_length(
                                0usize,
                                &"struct User with 3 elements",
                            ));
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<String>(&mut __seq)?
                    {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(_serde::de::Error::invalid_length(
                                1usize,
                                &"struct User with 3 elements",
                            ));
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<String>(&mut __seq)?
                    {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(_serde::de::Error::invalid_length(
                                2usize,
                                &"struct User with 3 elements",
                            ));
                        }
                    };
                    _serde::__private::Ok(User {
                        uid: __field0,
                        first_name: __field1,
                        last_name: __field2,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) =
                        _serde::de::MapAccess::next_key::<__Field>(&mut __map)?
                    {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("uid"),
                                    );
                                }
                                __field0 =
                                    _serde::__private::Some(_serde::de::MapAccess::next_value::<
                                        i32,
                                    >(
                                        &mut __map
                                    )?);
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "first_name",
                                        ),
                                    );
                                }
                                __field1 =
                                    _serde::__private::Some(_serde::de::MapAccess::next_value::<
                                        String,
                                    >(
                                        &mut __map
                                    )?);
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "last_name",
                                        ),
                                    );
                                }
                                __field2 =
                                    _serde::__private::Some(_serde::de::MapAccess::next_value::<
                                        String,
                                    >(
                                        &mut __map
                                    )?);
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(
                                    &mut __map,
                                )?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::de::missing_field("uid")?,
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("first_name")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("last_name")?
                        }
                    };
                    _serde::__private::Ok(User {
                        uid: __field0,
                        first_name: __field1,
                        last_name: __field2,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["uid", "first_name", "last_name"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "User",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<User>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:13:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for User {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Struct(specta::internal::construct::r#struct(
                "User".into(),
                Some(specta::internal::construct::sid(
                    "User",
                    "::example_v2_beta:13:1",
                )),
                ::alloc::vec::Vec::new(),
                specta::internal::construct::struct_named(
                    <[_]>::into_vec(
                        #[rustc_box]
                        ::alloc::boxed::Box::new([
                            (
                                "uid".into(),
                                specta::internal::construct::field(
                                    false,
                                    false,
                                    None,
                                    " The user's id".into(),
                                    Some({
                                        let ty =
                                            <i32 as specta::Type>::reference(type_map, &[]).inner;
                                        ty
                                    }),
                                ),
                            ),
                            (
                                "first_name".into(),
                                specta::internal::construct::field(
                                    false,
                                    false,
                                    None,
                                    " The user's first name".into(),
                                    Some({
                                        let ty = <String as specta::Type>::reference(type_map, &[])
                                            .inner;
                                        ty
                                    }),
                                ),
                            ),
                            (
                                "last_name".into(),
                                specta::internal::construct::field(
                                    false,
                                    false,
                                    None,
                                    " The user's last name".into(),
                                    Some({
                                        let ty = <String as specta::Type>::reference(type_map, &[])
                                            .inner;
                                        ty
                                    }),
                                ),
                            ),
                        ]),
                    ),
                    None,
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics: &[specta::datatype::DataType] = &[];
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "User".into(),
                        specta::internal::construct::sid("User", "::example_v2_beta:13:1"),
                        ::alloc::vec::Vec::new(),
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for User {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("User", "::example_v2_beta:13:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "User".into(),
                "Doc comments are also generated".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "User".into(),
                "Doc comments are also generated".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for User {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_User() {
        specta::export::internal::register::<User>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_User___rust_ctor___ctor: unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_User___rust_ctor___ctor() -> usize {
            __push_specta_type_User();
            0
        }
        __push_specta_type_User___rust_ctor___ctor
    };
};
#[automatically_derived]
impl ::core::clone::Clone for User {
    #[inline]
    fn clone(&self) -> User {
        User {
            uid: ::core::clone::Clone::clone(&self.uid),
            first_name: ::core::clone::Clone::clone(&self.first_name),
            last_name: ::core::clone::Clone::clone(&self.last_name),
        }
    }
}
enum Error {
    #[error(transparent)]
    Io(#[from] std::io::Error),
    #[error("Other: `{0}`")]
    Other(String),
}
#[automatically_derived]
impl ::core::fmt::Debug for Error {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            Error::Io(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Io", &__self_0)
            }
            Error::Other(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Other", &__self_0)
            }
        }
    }
}
#[allow(unused_qualifications)]
#[automatically_derived]
impl std::error::Error for Error {
    fn source(&self) -> ::core::option::Option<&(dyn std::error::Error + 'static)> {
        use thiserror::__private::AsDynError as _;
        #[allow(deprecated)]
        match self {
            Error::Io { 0: transparent } => std::error::Error::source(transparent.as_dyn_error()),
            Error::Other { .. } => ::core::option::Option::None,
        }
    }
}
#[allow(unused_qualifications)]
#[automatically_derived]
impl ::core::fmt::Display for Error {
    fn fmt(&self, __formatter: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use thiserror::__private::AsDisplay as _;
        #[allow(unused_variables, deprecated, clippy::used_underscore_binding)]
        match self {
            Error::Io(_0) => ::core::fmt::Display::fmt(_0, __formatter),
            Error::Other(_0) => {
                __formatter.write_fmt(format_args!("Other: `{0}`", _0.as_display()))
            }
        }
    }
}
#[allow(unused_qualifications)]
#[automatically_derived]
impl ::core::convert::From<std::io::Error> for Error {
    #[allow(deprecated)]
    fn from(source: std::io::Error) -> Self {
        Error::Io { 0: source }
    }
}
impl serde::Serialize for Error {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        serializer.serialize_str(self.to_string().as_ref())
    }
}
fn taurpc_fn__Api_update_state(new_value: String) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_update_state;
fn taurpc_fn__Api_test_io(user: User) -> User {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_test_io;
fn taurpc_fn__Api_test_option() -> Option<()> {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_test_option;
fn taurpc_fn__Api_with_sleep() {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_with_sleep;
fn taurpc_fn__Api_with_alias() {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_with_alias;
fn taurpc_fn__Api_ev(updated_value: String) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_ev;
fn taurpc_fn__Api_vec_test(arg: Vec<String>) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_vec_test;
fn taurpc_fn__Api_multiple_args(arg: Vec<String>, arg2: String) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_multiple_args;
fn taurpc_fn__Api_test_bigint(num: i64) -> i64 {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Api_test_bigint;
trait Api<R: Runtime>: Sized {
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::update_state`].
    type update_stateFut: std::future::Future<Output = ()> + Send;
    fn update_state(self, app_handle: AppHandle<R>, new_value: String) -> Self::update_stateFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::test_io`].
    type test_ioFut: std::future::Future<Output = User> + Send;
    fn test_io(self, user: User) -> Self::test_ioFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::test_option`].
    type test_optionFut: std::future::Future<Output = Option<()>> + Send;
    fn test_option(self) -> Self::test_optionFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::with_sleep`].
    type with_sleepFut: std::future::Future<Output = ()> + Send;
    fn with_sleep(self) -> Self::with_sleepFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::with_alias`].
    type with_aliasFut: std::future::Future<Output = ()> + Send;
    fn with_alias(self) -> Self::with_aliasFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::vec_test`].
    type vec_testFut: std::future::Future<Output = ()> + Send;
    fn vec_test(self, arg: Vec<String>) -> Self::vec_testFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::multiple_args`].
    type multiple_argsFut: std::future::Future<Output = ()> + Send;
    fn multiple_args(self, arg: Vec<String>, arg2: String) -> Self::multiple_argsFut;
    #[allow(non_camel_case_types)]
    ///The response future returned by [`Api::test_bigint`].
    type test_bigintFut: std::future::Future<Output = i64> + Send;
    fn test_bigint(self, num: i64) -> Self::test_bigintFut;
    /// Returns handler used for incoming requests and type generation.
    fn into_handler(self) -> TauRpcApiHandler<Self> {
        TauRpcApiHandler { methods: self }
    }
}
struct TauRpcApiHandler<P> {
    methods: P,
}
#[automatically_derived]
impl<P: ::core::clone::Clone> ::core::clone::Clone for TauRpcApiHandler<P> {
    #[inline]
    fn clone(&self) -> TauRpcApiHandler<P> {
        TauRpcApiHandler {
            methods: ::core::clone::Clone::clone(&self.methods),
        }
    }
}
use ::tauri::ipc::private::*;
impl<R: Runtime, P: Api + Clone + Send + 'static> taurpc::TauRpcHandler<R> for TauRpcApiHandler<P> {
    const TRAIT_NAME: &'static str = "Api";
    const PATH_PREFIX: &'static str = "";
    const EXPORT_PATH: Option<&'static str> = Some("../src/lib/bindings.ts");
    fn handle_incoming_request(self, __tauri_invoke__: tauri::ipc::Invoke<R>) {
        #[allow(unused_variables)]
        let ::tauri::ipc::Invoke {
            message: __tauri_message__,
            resolver: __tauri_resolver__,
            ..
        } = __tauri_invoke__;
        let prefix = __tauri_message__.command()[8..].to_string();
        let mut prefix = prefix.split(".").collect::<Vec<_>>();
        let cmd_name = prefix.pop().unwrap().to_string();
        match cmd_name.as_str() {
            "update_state" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::update_state(
                        self.methods,
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "update_state",
                            key: "app_handle",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "update_state",
                            key: "new_value",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                    );
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "test_io" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::test_io(
                        self.methods,
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "test_io",
                            key: "user",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                    );
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "test_option" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::test_option(self.methods);
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "with_sleep" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::with_sleep(self.methods);
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "method_with_alias" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::with_alias(self.methods);
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "vec_test" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::vec_test(
                        self.methods,
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "vec_test",
                            key: "arg",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                    );
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "multiple_args" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::multiple_args(
                        self.methods,
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "multiple_args",
                            key: "arg",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "multiple_args",
                            key: "arg2",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                    );
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            "test_bigint" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = Api::test_bigint(
                        self.methods,
                        ::tauri::ipc::CommandArg::from_command(::tauri::ipc::CommandItem {
                            name: "test_bigint",
                            key: "num",
                            message: &__tauri_message__,
                            acl: &None,
                            plugin: None,
                        })
                        .unwrap(),
                    );
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            _ => {
                __tauri_resolver__.reject(::alloc::__export::must_use({
                    let res = ::alloc::fmt::format(format_args!(
                        "message `{0}` not found",
                        __tauri_message__.command(),
                    ));
                    res
                }));
            }
        };
    }
    fn spawn(self) -> tokio::sync::broadcast::Sender<std::sync::Arc<tauri::ipc::Invoke<R>>> {
        let (tx, mut rx) = tokio::sync::broadcast::channel(32);
        tokio::spawn(async move {
            while let Ok(invoke) = rx.recv().await {
                if let Some(invoke) = std::sync::Arc::into_inner(invoke) {
                    self.clone().handle_incoming_request(invoke);
                }
            }
        });
        tx
    }
    fn args_map() -> String {
        "{\"ev\":[\"updated_value\"],\"vec_test\":[\"arg\"],\"test_bigint\":[\"num\"],\"method_with_alias\":[],\"multiple_args\":[\"arg\",\"arg2\"],\"test_option\":[],\"with_sleep\":[],\"update_state\":[\"new_value\"],\"test_io\":[\"user\"]}"
            .to_string()
    }
    fn collect_fn_types(
        mut types_map: &mut specta::TypeCollection,
    ) -> Vec<specta::datatype::Function> {
        ({
            fn export(
                type_map: &mut ::specta::TypeCollection,
            ) -> Vec<::specta::datatype::Function> {
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_update_state as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Api_update_state".into(),
                                    type_map,
                                    &["new_value".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_test_io as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Api_test_io".into(),
                                    type_map,
                                    &["user".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    false,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_test_option as fn() -> _,
                                    false,
                                    "taurpc_fn__Api_test_option".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    false,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_with_sleep as fn() -> _,
                                    false,
                                    "taurpc_fn__Api_with_sleep".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_with_alias as fn() -> _,
                                    false,
                                    "taurpc_fn__Api_with_alias".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_ev as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Api_ev".into(),
                                    type_map,
                                    &["updated_value".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_vec_test as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Api_vec_test".into(),
                                    type_map,
                                    &["arg".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_multiple_args as fn(_, _) -> _,
                                    false,
                                    "taurpc_fn__Api_multiple_args".into(),
                                    type_map,
                                    &["arg".into(), "arg2".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Api_test_bigint as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Api_test_bigint".into(),
                                    type_map,
                                    &["num".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    false,
                                )
                            }
                            export
                        }(type_map),
                    ]),
                )
            }
            export
        })(&mut types_map)
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcApiInputs {
    update_state(String),
    test_io(User),
    test_option(()),
    with_sleep(()),
    method_with_alias(()),
    ev(String),
    vec_test(Vec<String>),
    multiple_args((Vec<String>, String)),
    test_bigint(i64),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcApiInputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcApiInputs::update_state(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 0u32,
                            variant_name: "update_state",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::test_io(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 1u32,
                            variant_name: "test_io",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::test_option(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 2u32,
                            variant_name: "test_option",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::with_sleep(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 3u32,
                            variant_name: "with_sleep",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::method_with_alias(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 4u32,
                            variant_name: "method_with_alias",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::ev(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 5u32,
                            variant_name: "ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::vec_test(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 6u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::multiple_args(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 7u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputs::test_bigint(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputs",
                            variant_index: 8u32,
                            variant_name: "test_bigint",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for TauRpcApiInputs {
    #[inline]
    fn clone(&self) -> TauRpcApiInputs {
        match self {
            TauRpcApiInputs::update_state(__self_0) => {
                TauRpcApiInputs::update_state(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::test_io(__self_0) => {
                TauRpcApiInputs::test_io(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::test_option(__self_0) => {
                TauRpcApiInputs::test_option(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::with_sleep(__self_0) => {
                TauRpcApiInputs::with_sleep(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::method_with_alias(__self_0) => {
                TauRpcApiInputs::method_with_alias(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::ev(__self_0) => {
                TauRpcApiInputs::ev(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::vec_test(__self_0) => {
                TauRpcApiInputs::vec_test(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::multiple_args(__self_0) => {
                TauRpcApiInputs::multiple_args(::core::clone::Clone::clone(__self_0))
            }
            TauRpcApiInputs::test_bigint(__self_0) => {
                TauRpcApiInputs::test_bigint(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcApiInputTypes {
    update_state { __taurpc_type: String },
    test_io { __taurpc_type: User },
    test_option(()),
    with_sleep(()),
    method_with_alias(()),
    ev { __taurpc_type: String },
    vec_test { __taurpc_type: Vec<String> },
    multiple_args((Vec<String>, String)),
    test_bigint { __taurpc_type: i64 },
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:45:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcApiInputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcApiInputTypes".into(),
                specta::internal::construct::sid("TauRpcApiInputTypes", "::example_v2_beta:45:1"),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "input_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "update_state".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen = <String as specta::Type>::reference(
                                                        type_map,
                                                        &[],
                                                    )
                                                    .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "test_io".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen = <User as specta::Type>::reference(
                                                        type_map,
                                                        &[],
                                                    )
                                                    .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "test_option".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "with_sleep".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "method_with_alias".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen = <String as specta::Type>::reference(
                                                        type_map,
                                                        &[],
                                                    )
                                                    .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "vec_test".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen_0 =
                                                        <String as specta::Type>::reference(
                                                            type_map,
                                                            &[],
                                                        )
                                                        .inner;
                                                    let gen =
                                                        <Vec<String> as specta::Type>::reference(
                                                            type_map,
                                                            &[gen_0],
                                                        )
                                                        .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "multiple_args".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen_0_0 =
                                                <String as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            let gen_0 = <Vec<String> as specta::Type>::reference(
                                                type_map,
                                                &[gen_0_0],
                                            )
                                            .inner;
                                            let gen_1 =
                                                <String as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            let gen =
                                                <(Vec<String>, String) as specta::Type>::reference(
                                                    type_map,
                                                    &[gen_0, gen_1],
                                                )
                                                .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_bigint".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen = <i64 as specta::Type>::reference(
                                                        type_map,
                                                        &[],
                                                    )
                                                    .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcApiInputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcApiInputTypes",
                            "::example_v2_beta:45:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcApiInputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcApiInputTypes", "::example_v2_beta:45:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcApiInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcApiInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcApiInputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcApiInputTypes() {
        specta::export::internal::register::<TauRpcApiInputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcApiInputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcApiInputTypes___rust_ctor___ctor() -> usize {
            __push_specta_type_TauRpcApiInputTypes();
            0
        }
        __push_specta_type_TauRpcApiInputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcApiInputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcApiInputTypes::update_state { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a String,),
                        phantom: _serde::__private::PhantomData<TauRpcApiInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "update_state",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 0u32,
                            variant_name: "update_state",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcApiInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::test_io { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a User,),
                        phantom: _serde::__private::PhantomData<TauRpcApiInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "test_io",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 1u32,
                            variant_name: "test_io",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcApiInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::test_option(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 2u32,
                            variant_name: "test_option",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::with_sleep(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 3u32,
                            variant_name: "with_sleep",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::method_with_alias(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 4u32,
                            variant_name: "method_with_alias",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::ev { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a String,),
                        phantom: _serde::__private::PhantomData<TauRpcApiInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state =
                                _serde::Serializer::serialize_struct(__serializer, "ev", 0 + 1)?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 5u32,
                            variant_name: "ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcApiInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::vec_test { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a Vec<String>,),
                        phantom: _serde::__private::PhantomData<TauRpcApiInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "vec_test",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 6u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcApiInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 7u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiInputTypes::test_bigint { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a i64,),
                        phantom: _serde::__private::PhantomData<TauRpcApiInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "test_bigint",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiInputTypes",
                            variant_index: 8u32,
                            variant_name: "test_bigint",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcApiInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcApiOutputs {
    update_state(()),
    test_io(User),
    test_option(Option<()>),
    with_sleep(()),
    with_alias(()),
    ev(()),
    vec_test(()),
    multiple_args(()),
    test_bigint(i64),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcApiOutputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcApiOutputs::update_state(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 0u32,
                            variant_name: "update_state",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::test_io(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 1u32,
                            variant_name: "test_io",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::test_option(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 2u32,
                            variant_name: "test_option",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::with_sleep(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 3u32,
                            variant_name: "with_sleep",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::with_alias(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 4u32,
                            variant_name: "with_alias",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::ev(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 5u32,
                            variant_name: "ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::vec_test(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 6u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::multiple_args(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 7u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputs::test_bigint(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcApiOutputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputs",
                            variant_index: 8u32,
                            variant_name: "test_bigint",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcApiOutputTypes {
    update_state(()),
    test_io(User),
    test_option(Option<()>),
    with_sleep(()),
    method_with_alias(()),
    ev(()),
    vec_test(()),
    multiple_args(()),
    test_bigint(i64),
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:45:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcApiOutputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcApiOutputTypes".into(),
                specta::internal::construct::sid("TauRpcApiOutputTypes", "::example_v2_beta:45:1"),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "output_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "update_state".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_io".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <User as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_option".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen_0 =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            let gen = <Option<()> as specta::Type>::reference(
                                                type_map,
                                                &[gen_0],
                                            )
                                            .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "with_sleep".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "method_with_alias".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "vec_test".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "multiple_args".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_bigint".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <i64 as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcApiOutputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcApiOutputTypes",
                            "::example_v2_beta:45:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcApiOutputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcApiOutputTypes", "::example_v2_beta:45:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcApiOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcApiOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcApiOutputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcApiOutputTypes() {
        specta::export::internal::register::<TauRpcApiOutputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcApiOutputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcApiOutputTypes___rust_ctor___ctor() -> usize {
            __push_specta_type_TauRpcApiOutputTypes();
            0
        }
        __push_specta_type_TauRpcApiOutputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcApiOutputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcApiOutputTypes::update_state(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 0u32,
                            variant_name: "update_state",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::test_io(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 1u32,
                            variant_name: "test_io",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::test_option(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 2u32,
                            variant_name: "test_option",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::with_sleep(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 3u32,
                            variant_name: "with_sleep",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::method_with_alias(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 4u32,
                            variant_name: "method_with_alias",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 5u32,
                            variant_name: "ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::vec_test(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 6u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 7u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcApiOutputTypes::test_bigint(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcApiOutputTypes",
                            variant_index: 8u32,
                            variant_name: "test_bigint",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[allow(non_camel_case_types)]
enum TauRpcApiOutputFutures<P: Api, R: Runtime> {
    update_state(<P as Api>::update_stateFut),
    test_io(<P as Api>::test_ioFut),
    test_option(<P as Api>::test_optionFut),
    with_sleep(<P as Api>::with_sleepFut),
    with_alias(<P as Api>::with_aliasFut),
    vec_test(<P as Api>::vec_testFut),
    multiple_args(<P as Api>::multiple_argsFut),
    test_bigint(<P as Api>::test_bigintFut),
}
impl<P: Api> std::future::Future for TauRpcApiOutputFutures<P> {
    type Output = TauRpcApiOutputs;
    fn poll(
        self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<TauRpcApiOutputs> {
        unsafe {
            match std::pin::Pin::get_unchecked_mut(self) {
                TauRpcApiOutputFutures::update_state(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::update_state),
                TauRpcApiOutputFutures::test_io(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::test_io),
                TauRpcApiOutputFutures::test_option(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::test_option),
                TauRpcApiOutputFutures::with_sleep(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::with_sleep),
                TauRpcApiOutputFutures::with_alias(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::with_alias),
                TauRpcApiOutputFutures::vec_test(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::vec_test),
                TauRpcApiOutputFutures::multiple_args(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::multiple_args),
                TauRpcApiOutputFutures::test_bigint(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcApiOutputs::test_bigint),
            }
        }
    }
}
struct ApiEventTrigger<RT: Runtime>(taurpc::EventTrigger<RT>);
#[automatically_derived]
impl<RT: ::core::clone::Clone + Runtime> ::core::clone::Clone for ApiEventTrigger<RT> {
    #[inline]
    fn clone(&self) -> ApiEventTrigger<RT> {
        ApiEventTrigger(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl<RT: ::core::fmt::Debug + Runtime> ::core::fmt::Debug for ApiEventTrigger<RT> {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "ApiEventTrigger", &&self.0)
    }
}
impl<RT: Runtime> ApiEventTrigger<RT> {
    /// Generate a new client to trigger events on the client-side.
    fn new(app_handle: tauri::AppHandle<RT>) -> Self {
        let trigger = taurpc::EventTrigger::new(app_handle, String::from(""));
        Self(trigger)
    }
    /// Trigger an event with a specific scope.
    ///
    /// Options:
    ///    - Windows::All (default)
    ///    - Windows::One(String)
    ///    - Windows::N(Vec<String>)
    fn send_to(&self, scope: taurpc::Windows) -> Self {
        let trigger = taurpc::EventTrigger::new_scoped_from_trigger(self.0.clone(), scope);
        Self(trigger)
    }
    #[allow(unused)]
    fn ev(&self, updated_value: String) -> tauri::Result<()> {
        let proc_name = "ev";
        let req = TauRpcApiInputs::ev((updated_value));
        self.0.call(proc_name, req)
    }
}
struct ApiImpl {
    state: GlobalState,
}
#[automatically_derived]
impl ::core::clone::Clone for ApiImpl {
    #[inline]
    fn clone(&self) -> ApiImpl {
        ApiImpl {
            state: ::core::clone::Clone::clone(&self.state),
        }
    }
}
impl<R: Runtime> Api<R> for ApiImpl {
    fn update_state(
        self,
        app_handle: AppHandle<R>,
        new_value: String,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {
            let mut data = self.state.lock().await;
            {
                ::std::io::_print(format_args!("Before {0:?}\n", data));
            };
            *data = new_value;
            {
                ::std::io::_print(format_args!("After {0:?}\n", data));
            };
            let uppercase = data.to_uppercase();
            TauRpcEventsEventTrigger::new(app_handle)
                .state_changed(uppercase)
                .unwrap();
        })
    }
    fn test_io(
        self,
        user: User,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = User> + ::core::marker::Send>>
    {
        Box::pin(async move { user })
    }
    fn test_option(
        self,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = Option<()>> + ::core::marker::Send>>
    {
        Box::pin(async move { Some(()) })
    }
    fn with_sleep(
        self,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {
            sleep(Duration::from_millis(2000)).await;
        })
    }
    fn with_alias(
        self,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {
            {
                ::std::io::_print(format_args!("method with alias called\n"));
            };
        })
    }
    fn vec_test(
        self,
        _arg: Vec<String>,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {})
    }
    fn multiple_args(
        self,
        _arg: Vec<String>,
        _arg2: String,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {})
    }
    fn test_bigint(
        self,
        num: i64,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i64> + ::core::marker::Send>>
    {
        Box::pin(async move { num })
    }
    type update_stateFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
    type test_ioFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = User> + ::core::marker::Send>>;
    type test_optionFut = ::core::pin::Pin<
        Box<dyn ::core::future::Future<Output = Option<()>> + ::core::marker::Send>,
    >;
    type with_sleepFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
    type with_aliasFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
    type vec_testFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
    type multiple_argsFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
    type test_bigintFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i64> + ::core::marker::Send>>;
}
fn taurpc_fn__Events_test_ev() {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Events_test_ev;
fn taurpc_fn__Events_state_changed(new_state: String) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Events_state_changed;
fn taurpc_fn__Events_vec_test(args: Vec<String>) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Events_vec_test;
fn taurpc_fn__Events_multiple_args(arg1: u16, arg2: Vec<String>) {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__Events_multiple_args;
trait Events: Sized {
    /// Returns handler used for incoming requests and type generation.
    fn into_handler(self) -> TauRpcEventsHandler<Self> {
        TauRpcEventsHandler { methods: self }
    }
}
struct TauRpcEventsHandler<P> {
    methods: P,
}
#[automatically_derived]
impl<P: ::core::clone::Clone> ::core::clone::Clone for TauRpcEventsHandler<P> {
    #[inline]
    fn clone(&self) -> TauRpcEventsHandler<P> {
        TauRpcEventsHandler {
            methods: ::core::clone::Clone::clone(&self.methods),
        }
    }
}
use ::tauri::ipc::private::*;
impl<R: Runtime, P: Events + Clone + Send + 'static> taurpc::TauRpcHandler<R>
    for TauRpcEventsHandler<P>
{
    const TRAIT_NAME: &'static str = "Events";
    const PATH_PREFIX: &'static str = "events";
    const EXPORT_PATH: Option<&'static str> = Some("../src/lib/bindings.ts");
    fn handle_incoming_request(self, __tauri_invoke__: tauri::ipc::Invoke<R>) {
        #[allow(unused_variables)]
        let ::tauri::ipc::Invoke {
            message: __tauri_message__,
            resolver: __tauri_resolver__,
            ..
        } = __tauri_invoke__;
        let prefix = __tauri_message__.command()[8..].to_string();
        let mut prefix = prefix.split(".").collect::<Vec<_>>();
        let cmd_name = prefix.pop().unwrap().to_string();
        match cmd_name.as_str() {
            _ => {
                __tauri_resolver__.reject(::alloc::__export::must_use({
                    let res = ::alloc::fmt::format(format_args!(
                        "message `{0}` not found",
                        __tauri_message__.command(),
                    ));
                    res
                }));
            }
        };
    }
    fn spawn(self) -> tokio::sync::broadcast::Sender<std::sync::Arc<tauri::ipc::Invoke<R>>> {
        let (tx, mut rx) = tokio::sync::broadcast::channel(32);
        tokio::spawn(async move {
            while let Ok(invoke) = rx.recv().await {
                if let Some(invoke) = std::sync::Arc::into_inner(invoke) {
                    self.clone().handle_incoming_request(invoke);
                }
            }
        });
        tx
    }
    fn args_map() -> String {
        "{\"test_ev\":[],\"vec_test\":[\"args\"],\"multiple_args\":[\"arg1\",\"arg2\"],\"state_changed\":[\"new_state\"]}"
            .to_string()
    }
    fn collect_fn_types(
        mut types_map: &mut specta::TypeCollection,
    ) -> Vec<specta::datatype::Function> {
        ({
            fn export(
                type_map: &mut ::specta::TypeCollection,
            ) -> Vec<::specta::datatype::Function> {
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Events_test_ev as fn() -> _,
                                    false,
                                    "taurpc_fn__Events_test_ev".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Events_state_changed as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Events_state_changed".into(),
                                    type_map,
                                    &["new_state".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Events_vec_test as fn(_) -> _,
                                    false,
                                    "taurpc_fn__Events_vec_test".into(),
                                    type_map,
                                    &["args".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__Events_multiple_args as fn(_, _) -> _,
                                    false,
                                    "taurpc_fn__Events_multiple_args".into(),
                                    type_map,
                                    &["arg1".into(), "arg2".into()],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                    ]),
                )
            }
            export
        })(&mut types_map)
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcEventsInputs {
    test_ev(()),
    state_changed(String),
    vec_test(Vec<String>),
    multiple_args((u16, Vec<String>)),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcEventsInputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcEventsInputs::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputs",
                            variant_index: 0u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputs::state_changed(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputs",
                            variant_index: 1u32,
                            variant_name: "state_changed",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputs::vec_test(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputs",
                            variant_index: 2u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputs::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputs",
                            variant_index: 3u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for TauRpcEventsInputs {
    #[inline]
    fn clone(&self) -> TauRpcEventsInputs {
        match self {
            TauRpcEventsInputs::test_ev(__self_0) => {
                TauRpcEventsInputs::test_ev(::core::clone::Clone::clone(__self_0))
            }
            TauRpcEventsInputs::state_changed(__self_0) => {
                TauRpcEventsInputs::state_changed(::core::clone::Clone::clone(__self_0))
            }
            TauRpcEventsInputs::vec_test(__self_0) => {
                TauRpcEventsInputs::vec_test(::core::clone::Clone::clone(__self_0))
            }
            TauRpcEventsInputs::multiple_args(__self_0) => {
                TauRpcEventsInputs::multiple_args(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcEventsInputTypes {
    test_ev(()),
    state_changed { __taurpc_type: String },
    vec_test { __taurpc_type: Vec<String> },
    multiple_args((u16, Vec<String>)),
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:134:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcEventsInputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcEventsInputTypes".into(),
                specta::internal::construct::sid(
                    "TauRpcEventsInputTypes",
                    "::example_v2_beta:134:1",
                ),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "input_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "test_ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "state_changed".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen = <String as specta::Type>::reference(
                                                        type_map,
                                                        &[],
                                                    )
                                                    .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "vec_test".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_named(
                                    <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([(
                                            "__taurpc_type".into(),
                                            specta::internal::construct::field(
                                                false,
                                                false,
                                                None,
                                                "".into(),
                                                Some({
                                                    let gen_0 =
                                                        <String as specta::Type>::reference(
                                                            type_map,
                                                            &[],
                                                        )
                                                        .inner;
                                                    let gen =
                                                        <Vec<String> as specta::Type>::reference(
                                                            type_map,
                                                            &[gen_0],
                                                        )
                                                        .inner;
                                                    gen
                                                }),
                                            ),
                                        )]),
                                    ),
                                    None,
                                ),
                            ),
                        ),
                        (
                            "multiple_args".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen_0 =
                                                <u16 as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            let gen_1_0 =
                                                <String as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            let gen_1 = <Vec<String> as specta::Type>::reference(
                                                type_map,
                                                &[gen_1_0],
                                            )
                                            .inner;
                                            let gen =
                                                <(u16, Vec<String>) as specta::Type>::reference(
                                                    type_map,
                                                    &[gen_0, gen_1],
                                                )
                                                .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcEventsInputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcEventsInputTypes",
                            "::example_v2_beta:134:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcEventsInputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcEventsInputTypes", "::example_v2_beta:134:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcEventsInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcEventsInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcEventsInputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcEventsInputTypes() {
        specta::export::internal::register::<TauRpcEventsInputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcEventsInputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcEventsInputTypes___rust_ctor___ctor() -> usize
        {
            __push_specta_type_TauRpcEventsInputTypes();
            0
        }
        __push_specta_type_TauRpcEventsInputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcEventsInputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcEventsInputTypes::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputTypes",
                            variant_index: 0u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputTypes::state_changed { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a String,),
                        phantom: _serde::__private::PhantomData<TauRpcEventsInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "state_changed",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputTypes",
                            variant_index: 1u32,
                            variant_name: "state_changed",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcEventsInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputTypes::vec_test { ref __taurpc_type } => {
                    #[doc(hidden)]
                    struct __AdjacentlyTagged<'__a> {
                        data: (&'__a Vec<String>,),
                        phantom: _serde::__private::PhantomData<TauRpcEventsInputTypes>,
                    }
                    impl<'__a> _serde::Serialize for __AdjacentlyTagged<'__a> {
                        fn serialize<__S>(
                            &self,
                            __serializer: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            #[allow(unused_variables)]
                            let (__taurpc_type,) = self.data;
                            let mut __serde_state = _serde::Serializer::serialize_struct(
                                __serializer,
                                "vec_test",
                                0 + 1,
                            )?;
                            _serde::ser::SerializeStruct::serialize_field(
                                &mut __serde_state,
                                "__taurpc_type",
                                __taurpc_type,
                            )?;
                            _serde::ser::SerializeStruct::end(__serde_state)
                        }
                    }
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputTypes",
                            variant_index: 2u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        &__AdjacentlyTagged {
                            data: (__taurpc_type,),
                            phantom: _serde::__private::PhantomData::<TauRpcEventsInputTypes>,
                        },
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsInputTypes::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsInputTypes",
                            variant_index: 3u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcEventsOutputs {
    test_ev(()),
    state_changed(()),
    vec_test(()),
    multiple_args(()),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcEventsOutputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcEventsOutputs::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputs",
                            variant_index: 0u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputs::state_changed(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputs",
                            variant_index: 1u32,
                            variant_name: "state_changed",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputs::vec_test(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputs",
                            variant_index: 2u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputs::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputs",
                            variant_index: 3u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcEventsOutputTypes {
    test_ev(()),
    state_changed(()),
    vec_test(()),
    multiple_args(()),
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:134:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcEventsOutputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcEventsOutputTypes".into(),
                specta::internal::construct::sid(
                    "TauRpcEventsOutputTypes",
                    "::example_v2_beta:134:1",
                ),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "output_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "test_ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "state_changed".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "vec_test".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "multiple_args".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcEventsOutputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcEventsOutputTypes",
                            "::example_v2_beta:134:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcEventsOutputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcEventsOutputTypes", "::example_v2_beta:134:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcEventsOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcEventsOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcEventsOutputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcEventsOutputTypes() {
        specta::export::internal::register::<TauRpcEventsOutputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcEventsOutputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcEventsOutputTypes___rust_ctor___ctor() -> usize
        {
            __push_specta_type_TauRpcEventsOutputTypes();
            0
        }
        __push_specta_type_TauRpcEventsOutputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcEventsOutputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcEventsOutputTypes::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputTypes",
                            variant_index: 0u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputTypes::state_changed(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputTypes",
                            variant_index: 1u32,
                            variant_name: "state_changed",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputTypes::vec_test(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputTypes",
                            variant_index: 2u32,
                            variant_name: "vec_test",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcEventsOutputTypes::multiple_args(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcEventsOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcEventsOutputTypes",
                            variant_index: 3u32,
                            variant_name: "multiple_args",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
struct TauRpcEventsEventTrigger<RT: Runtime>(taurpc::EventTrigger<RT>);
#[automatically_derived]
impl<RT: ::core::clone::Clone + Runtime> ::core::clone::Clone for TauRpcEventsEventTrigger<RT> {
    #[inline]
    fn clone(&self) -> TauRpcEventsEventTrigger<RT> {
        TauRpcEventsEventTrigger(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl<RT: ::core::fmt::Debug + Runtime> ::core::fmt::Debug for TauRpcEventsEventTrigger<RT> {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "TauRpcEventsEventTrigger", &&self.0)
    }
}
impl<RT: Runtime> TauRpcEventsEventTrigger<RT> {
    /// Generate a new client to trigger events on the client-side.
    fn new(app_handle: tauri::AppHandle<RT>) -> Self {
        let trigger = taurpc::EventTrigger::new(app_handle, String::from("events"));
        Self(trigger)
    }
    /// Trigger an event with a specific scope.
    ///
    /// Options:
    ///    - Windows::All (default)
    ///    - Windows::One(String)
    ///    - Windows::N(Vec<String>)
    fn send_to(&self, scope: taurpc::Windows) -> Self {
        let trigger = taurpc::EventTrigger::new_scoped_from_trigger(self.0.clone(), scope);
        Self(trigger)
    }
    #[allow(unused)]
    fn test_ev(&self) -> tauri::Result<()> {
        let proc_name = "test_ev";
        let req = TauRpcEventsInputs::test_ev(());
        self.0.call(proc_name, req)
    }
    #[allow(unused)]
    fn state_changed(&self, new_state: String) -> tauri::Result<()> {
        let proc_name = "state_changed";
        let req = TauRpcEventsInputs::state_changed((new_state));
        self.0.call(proc_name, req)
    }
    #[allow(unused)]
    fn vec_test(&self, args: Vec<String>) -> tauri::Result<()> {
        let proc_name = "vec_test";
        let req = TauRpcEventsInputs::vec_test((args));
        self.0.call(proc_name, req)
    }
    #[allow(unused)]
    fn multiple_args(&self, arg1: u16, arg2: Vec<String>) -> tauri::Result<()> {
        let proc_name = "multiple_args";
        let req = TauRpcEventsInputs::multiple_args((arg1, arg2));
        self.0.call(proc_name, req)
    }
}
struct EventsImpl;
#[automatically_derived]
impl ::core::clone::Clone for EventsImpl {
    #[inline]
    fn clone(&self) -> EventsImpl {
        EventsImpl
    }
}
impl Events for EventsImpl {}
fn taurpc_fn__UiApi_trigger() {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__UiApi_trigger;
fn taurpc_fn__UiApi_test_ev() {
    ::core::panicking::panic("not implemented");
}
#[allow(unused_imports)]
use __specta__fn__taurpc_fn__UiApi_test_ev;
trait UiApi: Sized {
    #[allow(non_camel_case_types)]
    ///The response future returned by [`UiApi::trigger`].
    type triggerFut: std::future::Future<Output = ()> + Send;
    fn trigger(self) -> Self::triggerFut;
    /// Returns handler used for incoming requests and type generation.
    fn into_handler(self) -> TauRpcUiApiHandler<Self> {
        TauRpcUiApiHandler { methods: self }
    }
}
struct TauRpcUiApiHandler<P> {
    methods: P,
}
#[automatically_derived]
impl<P: ::core::clone::Clone> ::core::clone::Clone for TauRpcUiApiHandler<P> {
    #[inline]
    fn clone(&self) -> TauRpcUiApiHandler<P> {
        TauRpcUiApiHandler {
            methods: ::core::clone::Clone::clone(&self.methods),
        }
    }
}
use ::tauri::ipc::private::*;
impl<R: Runtime, P: UiApi + Clone + Send + 'static> taurpc::TauRpcHandler<R>
    for TauRpcUiApiHandler<P>
{
    const TRAIT_NAME: &'static str = "UiApi";
    const PATH_PREFIX: &'static str = "api.ui";
    const EXPORT_PATH: Option<&'static str> = Some("../src/lib/bindings.ts");
    fn handle_incoming_request(self, __tauri_invoke__: tauri::ipc::Invoke<R>) {
        #[allow(unused_variables)]
        let ::tauri::ipc::Invoke {
            message: __tauri_message__,
            resolver: __tauri_resolver__,
            ..
        } = __tauri_invoke__;
        let prefix = __tauri_message__.command()[8..].to_string();
        let mut prefix = prefix.split(".").collect::<Vec<_>>();
        let cmd_name = prefix.pop().unwrap().to_string();
        match cmd_name.as_str() {
            "trigger" => {
                __tauri_resolver__.respond_async_serialized(async move {
                    let res = UiApi::trigger(self.methods);
                    let kind = (&res).async_kind();
                    kind.future(res).await
                });
            }
            _ => {
                __tauri_resolver__.reject(::alloc::__export::must_use({
                    let res = ::alloc::fmt::format(format_args!(
                        "message `{0}` not found",
                        __tauri_message__.command(),
                    ));
                    res
                }));
            }
        };
    }
    fn spawn(self) -> tokio::sync::broadcast::Sender<std::sync::Arc<tauri::ipc::Invoke<R>>> {
        let (tx, mut rx) = tokio::sync::broadcast::channel(32);
        tokio::spawn(async move {
            while let Ok(invoke) = rx.recv().await {
                if let Some(invoke) = std::sync::Arc::into_inner(invoke) {
                    self.clone().handle_incoming_request(invoke);
                }
            }
        });
        tx
    }
    fn args_map() -> String {
        "{\"test_ev\":[],\"trigger\":[]}".to_string()
    }
    fn collect_fn_types(
        mut types_map: &mut specta::TypeCollection,
    ) -> Vec<specta::datatype::Function> {
        ({
            fn export(
                type_map: &mut ::specta::TypeCollection,
            ) -> Vec<::specta::datatype::Function> {
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__UiApi_trigger as fn() -> _,
                                    false,
                                    "taurpc_fn__UiApi_trigger".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                        {
                            fn export(
                                type_map: &mut specta::TypeCollection,
                            ) -> specta::datatype::Function {
                                specta::internal::get_fn_datatype(
                                    taurpc_fn__UiApi_test_ev as fn() -> _,
                                    false,
                                    "taurpc_fn__UiApi_test_ev".into(),
                                    type_map,
                                    &[],
                                    std::borrow::Cow::Borrowed(""),
                                    None,
                                    true,
                                )
                            }
                            export
                        }(type_map),
                    ]),
                )
            }
            export
        })(&mut types_map)
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcUiApiInputs {
    trigger(()),
    test_ev(()),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcUiApiInputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcUiApiInputs::trigger(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcUiApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiInputs",
                            variant_index: 0u32,
                            variant_name: "trigger",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcUiApiInputs::test_ev(ref __field0) => {
                    let mut __struct =
                        _serde::Serializer::serialize_struct(__serializer, "TauRpcUiApiInputs", 2)?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiInputs",
                            variant_index: 1u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for TauRpcUiApiInputs {
    #[inline]
    fn clone(&self) -> TauRpcUiApiInputs {
        match self {
            TauRpcUiApiInputs::trigger(__self_0) => {
                TauRpcUiApiInputs::trigger(::core::clone::Clone::clone(__self_0))
            }
            TauRpcUiApiInputs::test_ev(__self_0) => {
                TauRpcUiApiInputs::test_ev(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[serde(tag = "proc_name", content = "input_type")]
#[allow(non_camel_case_types)]
enum TauRpcUiApiInputTypes {
    trigger(()),
    test_ev(()),
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:155:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcUiApiInputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcUiApiInputTypes".into(),
                specta::internal::construct::sid(
                    "TauRpcUiApiInputTypes",
                    "::example_v2_beta:155:1",
                ),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "input_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "trigger".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcUiApiInputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcUiApiInputTypes",
                            "::example_v2_beta:155:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcUiApiInputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcUiApiInputTypes", "::example_v2_beta:155:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcUiApiInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcUiApiInputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcUiApiInputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcUiApiInputTypes() {
        specta::export::internal::register::<TauRpcUiApiInputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcUiApiInputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcUiApiInputTypes___rust_ctor___ctor() -> usize
        {
            __push_specta_type_TauRpcUiApiInputTypes();
            0
        }
        __push_specta_type_TauRpcUiApiInputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcUiApiInputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcUiApiInputTypes::trigger(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiInputTypes",
                            variant_index: 0u32,
                            variant_name: "trigger",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcUiApiInputTypes::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiInputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiInputTypes",
                            variant_index: 1u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "input_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcUiApiOutputs {
    trigger(()),
    test_ev(()),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcUiApiOutputs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcUiApiOutputs::trigger(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiOutputs",
                            variant_index: 0u32,
                            variant_name: "trigger",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcUiApiOutputs::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiOutputs",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiOutputs",
                            variant_index: 1u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[serde(tag = "proc_name", content = "output_type")]
#[allow(non_camel_case_types)]
enum TauRpcUiApiOutputTypes {
    trigger(()),
    test_ev(()),
}
const _: () = {
    const IMPL_LOCATION: specta::ImplLocation =
        specta::internal::construct::impl_location("src/main.rs:155:1");
    const DEFINITION_GENERICS: &[specta::datatype::DataType] = &[];
    #[automatically_derived]
    impl specta::Type for TauRpcUiApiOutputTypes {
        fn inline(
            type_map: &mut specta::TypeCollection,
            generics: specta::Generics,
        ) -> specta::datatype::DataType {
            let generics = match generics {
                specta::Generics::Definition => DEFINITION_GENERICS,
                specta::Generics::Provided(generics) => generics,
            };
            specta::datatype::DataType::Enum(specta::internal::construct::r#enum(
                "TauRpcUiApiOutputTypes".into(),
                specta::internal::construct::sid(
                    "TauRpcUiApiOutputTypes",
                    "::example_v2_beta:155:1",
                ),
                specta::datatype::EnumRepr::Adjacent {
                    tag: "proc_name".into(),
                    content: "output_type".into(),
                },
                false,
                ::alloc::vec::Vec::new(),
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        (
                            "trigger".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                        (
                            "test_ev".into(),
                            specta::internal::construct::enum_variant(
                                false,
                                None,
                                "".into(),
                                specta::internal::construct::enum_variant_unnamed(<[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([specta::internal::construct::field(
                                        false,
                                        false,
                                        None,
                                        "".into(),
                                        {
                                            let gen =
                                                <() as specta::Type>::reference(type_map, &[])
                                                    .inner;
                                            Some(gen)
                                        },
                                    )]),
                                )),
                            ),
                        ),
                    ]),
                ),
            ))
        }
        fn reference(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::reference::Reference {
            {
                let generics = ::alloc::vec::Vec::new();
                specta::datatype::reference::reference::<Self>(
                    type_map,
                    specta::internal::construct::data_type_reference(
                        "TauRpcUiApiOutputTypes".into(),
                        specta::internal::construct::sid(
                            "TauRpcUiApiOutputTypes",
                            "::example_v2_beta:155:1",
                        ),
                        generics,
                    ),
                )
            }
        }
    }
    #[automatically_derived]
    impl specta::NamedType for TauRpcUiApiOutputTypes {
        fn sid() -> specta::SpectaID {
            specta::internal::construct::sid("TauRpcUiApiOutputTypes", "::example_v2_beta:155:1")
        }
        fn named_data_type(
            type_map: &mut specta::TypeCollection,
            generics: &[specta::datatype::DataType],
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcUiApiOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Provided(generics)),
            )
        }
        fn definition_named_data_type(
            type_map: &mut specta::TypeCollection,
        ) -> specta::datatype::NamedDataType {
            specta::internal::construct::named_data_type(
                "TauRpcUiApiOutputTypes".into(),
                "".into(),
                None,
                Self::sid(),
                IMPL_LOCATION,
                <Self as specta::Type>::inline(type_map, specta::Generics::Definition),
            )
        }
    }
    #[automatically_derived]
    impl specta::Flatten for TauRpcUiApiOutputTypes {}
    #[allow(non_snake_case)]
    extern "C" fn __push_specta_type_TauRpcUiApiOutputTypes() {
        specta::export::internal::register::<TauRpcUiApiOutputTypes>();
    }
    #[used]
    #[allow(non_upper_case_globals, non_snake_case)]
    #[doc(hidden)]
    #[link_section = ".init_array"]
    static __push_specta_type_TauRpcUiApiOutputTypes___rust_ctor___ctor:
        unsafe extern "C" fn() -> usize = {
        #[allow(non_snake_case)]
        #[link_section = ".text.startup"]
        unsafe extern "C" fn __push_specta_type_TauRpcUiApiOutputTypes___rust_ctor___ctor() -> usize
        {
            __push_specta_type_TauRpcUiApiOutputTypes();
            0
        }
        __push_specta_type_TauRpcUiApiOutputTypes___rust_ctor___ctor
    };
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TauRpcUiApiOutputTypes {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                TauRpcUiApiOutputTypes::trigger(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiOutputTypes",
                            variant_index: 0u32,
                            variant_name: "trigger",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
                TauRpcUiApiOutputTypes::test_ev(ref __field0) => {
                    let mut __struct = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TauRpcUiApiOutputTypes",
                        2,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "proc_name",
                        &_serde::__private::ser::AdjacentlyTaggedEnumVariant {
                            enum_name: "TauRpcUiApiOutputTypes",
                            variant_index: 1u32,
                            variant_name: "test_ev",
                        },
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __struct,
                        "output_type",
                        __field0,
                    )?;
                    _serde::ser::SerializeStruct::end(__struct)
                }
            }
        }
    }
};
#[allow(non_camel_case_types)]
enum TauRpcUiApiOutputFutures<P: UiApi> {
    trigger(<P as UiApi>::triggerFut),
}
impl<P: UiApi> std::future::Future for TauRpcUiApiOutputFutures<P> {
    type Output = TauRpcUiApiOutputs;
    fn poll(
        self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<TauRpcUiApiOutputs> {
        unsafe {
            match std::pin::Pin::get_unchecked_mut(self) {
                TauRpcUiApiOutputFutures::trigger(resp) => std::pin::Pin::new_unchecked(resp)
                    .poll(cx)
                    .map(TauRpcUiApiOutputs::trigger),
            }
        }
    }
}
struct TauRpcUiApiEventTrigger<RT: Runtime>(taurpc::EventTrigger<RT>);
#[automatically_derived]
impl<RT: ::core::clone::Clone + Runtime> ::core::clone::Clone for TauRpcUiApiEventTrigger<RT> {
    #[inline]
    fn clone(&self) -> TauRpcUiApiEventTrigger<RT> {
        TauRpcUiApiEventTrigger(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl<RT: ::core::fmt::Debug + Runtime> ::core::fmt::Debug for TauRpcUiApiEventTrigger<RT> {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "TauRpcUiApiEventTrigger", &&self.0)
    }
}
impl<RT: Runtime> TauRpcUiApiEventTrigger<RT> {
    /// Generate a new client to trigger events on the client-side.
    fn new(app_handle: tauri::AppHandle<RT>) -> Self {
        let trigger = taurpc::EventTrigger::new(app_handle, String::from("api.ui"));
        Self(trigger)
    }
    /// Trigger an event with a specific scope.
    ///
    /// Options:
    ///    - Windows::All (default)
    ///    - Windows::One(String)
    ///    - Windows::N(Vec<String>)
    fn send_to(&self, scope: taurpc::Windows) -> Self {
        let trigger = taurpc::EventTrigger::new_scoped_from_trigger(self.0.clone(), scope);
        Self(trigger)
    }
    #[allow(unused)]
    fn test_ev(&self) -> tauri::Result<()> {
        let proc_name = "test_ev";
        let req = TauRpcUiApiInputs::test_ev(());
        self.0.call(proc_name, req)
    }
}
struct UiApiImpl;
#[automatically_derived]
impl ::core::clone::Clone for UiApiImpl {
    #[inline]
    fn clone(&self) -> UiApiImpl {
        UiApiImpl
    }
}
impl UiApi for UiApiImpl {
    fn trigger(
        self,
    ) -> ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>> {
        Box::pin(async move {
            {
                ::std::io::_print(format_args!("Trigger ui event\n"));
            }
        })
    }
    type triggerFut =
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> + ::core::marker::Send>>;
}
type GlobalState = Arc<Mutex<String>>;
fn main() {
    let body = async {
        let (tx, rx) = oneshot::channel::<AppHandle>();
        tokio::spawn(async move {
            let app_handle = rx.await.unwrap();
            let events_trigger = TauRpcEventsEventTrigger::new(app_handle.clone());
            let ui_trigger = TauRpcUiApiEventTrigger::new(app_handle);
            let mut interval = tokio::time::interval(Duration::from_secs(1));
            loop {
                interval.tick().await;
                events_trigger.vec_test(<[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([String::from("test"), String::from("test2")]),
                ))?;
                events_trigger.multiple_args(
                    0,
                    <[_]>::into_vec(
                        #[rustc_box]
                        ::alloc::boxed::Box::new([String::from("test"), String::from("test2")]),
                    ),
                )?;
                events_trigger.test_ev()?;
                ui_trigger.test_ev()?;
            }
            #[allow(unreachable_code)]
            Ok::<(), tauri::Error>(())
        });
        let router = Router::new()
            .export_config(
                specta_typescript::Typescript::default()
                    .header("// My header\n\n")
                    .bigint(specta_typescript::BigIntExportBehavior::String),
            )
            .merge(
                ApiImpl {
                    state: Arc::new(Mutex::new("state".to_string())),
                }
                .into_handler(),
            )
            .merge(EventsImpl.into_handler())
            .merge(UiApiImpl.into_handler());
        tauri::Builder::default()
            .plugin(tauri_plugin_shell::init())
            .invoke_handler(router.into_handler())
            .setup(|app| {
                #[cfg(debug_assertions)]
                app.get_webview_window("main").unwrap().open_devtools();
                tx.send(app.handle().clone()).unwrap();
                Ok(())
            })
            .run({
                let thread = ::std::thread::Builder::new()
                    .name(String::from("generated tauri context creation"))
                    .stack_size(8 * 1024 * 1024)
                    .spawn(|| {
                        #[allow(unused_mut, clippy::let_and_return)]
                        let mut context = ::tauri::Context::new(
                            ::tauri::utils::config::Config {
                                schema: None,
                                product_name: ::core::option::Option::Some(
                                    "example-v2-beta".into(),
                                ),
                                main_binary_name: ::core::option::Option::None,
                                version: ::core::option::Option::Some("0.0.0".into()),
                                identifier: "example-taurpc".into(),
                                app: ::tauri::utils::config::AppConfig {
                                    windows: <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([
                                            ::tauri::utils::config::WindowConfig {
                                                label: "main".into(),
                                                url: ::tauri::utils::config::WebviewUrl::App(
                                                    ::std::path::PathBuf::from("index.html"),
                                                ),
                                                create: true,
                                                user_agent: ::core::option::Option::None,
                                                drag_drop_enabled: true,
                                                center: false,
                                                x: ::core::option::Option::None,
                                                y: ::core::option::Option::None,
                                                width: 800f64,
                                                height: 600f64,
                                                min_width: ::core::option::Option::None,
                                                min_height: ::core::option::Option::None,
                                                max_width: ::core::option::Option::None,
                                                max_height: ::core::option::Option::None,
                                                resizable: true,
                                                maximizable: true,
                                                minimizable: true,
                                                closable: true,
                                                title: "example-v2-beta".into(),
                                                proxy_url: ::core::option::Option::None,
                                                fullscreen: false,
                                                focus: true,
                                                transparent: false,
                                                maximized: false,
                                                visible: true,
                                                decorations: true,
                                                always_on_bottom: false,
                                                always_on_top: false,
                                                visible_on_all_workspaces: false,
                                                content_protected: false,
                                                skip_taskbar: false,
                                                window_classname: ::core::option::Option::None,
                                                theme: ::core::option::Option::None,
                                                title_bar_style: ::tauri::utils::TitleBarStyle::Visible,
                                                hidden_title: false,
                                                accept_first_mouse: false,
                                                tabbing_identifier: ::core::option::Option::None,
                                                additional_browser_args: ::core::option::Option::None,
                                                shadow: true,
                                                window_effects: ::core::option::Option::None,
                                                incognito: false,
                                                parent: ::core::option::Option::None,
                                                zoom_hotkeys_enabled: false,
                                                browser_extensions_enabled: false,
                                                use_https_scheme: false,
                                                devtools: ::core::option::Option::None,
                                                background_color: ::core::option::Option::None,
                                            },
                                        ]),
                                    ),
                                    security: ::tauri::utils::config::SecurityConfig {
                                        csp: ::core::option::Option::None,
                                        dev_csp: ::core::option::Option::None,
                                        freeze_prototype: false,
                                        dangerous_disable_asset_csp_modification: ::tauri::utils::config::DisabledCspModificationKind::Flag(
                                            false,
                                        ),
                                        asset_protocol: ::tauri::utils::config::AssetProtocolConfig {
                                            scope: ::tauri::utils::config::FsScope::AllowedPaths(
                                                ::alloc::vec::Vec::new(),
                                            ),
                                            ..Default::default()
                                        },
                                        pattern: ::tauri::utils::config::PatternKind::Brownfield,
                                        capabilities: ::alloc::vec::Vec::new(),
                                        headers: ::core::option::Option::None,
                                    },
                                    tray_icon: ::core::option::Option::None,
                                    macos_private_api: false,
                                    with_global_tauri: false,
                                    enable_gtk_app_id: false,
                                },
                                build: ::tauri::utils::config::BuildConfig {
                                    runner: None,
                                    dev_url: ::core::option::Option::Some(
                                        "http://localhost:1420/".parse().unwrap(),
                                    ),
                                    frontend_dist: ::core::option::Option::Some(
                                        ::tauri::utils::config::FrontendDist::Directory(
                                            ::std::path::PathBuf::from("../dist"),
                                        ),
                                    ),
                                    before_dev_command: None,
                                    before_build_command: None,
                                    before_bundle_command: None,
                                    features: None,
                                },
                                bundle: ::tauri::utils::config::BundleConfig {
                                    active: true,
                                    publisher: None,
                                    homepage: None,
                                    icon: <[_]>::into_vec(
                                        #[rustc_box]
                                        ::alloc::boxed::Box::new([
                                            "icons/32x32.png".into(),
                                            "icons/128x128.png".into(),
                                            "icons/128x128@2x.png".into(),
                                            "icons/icon.icns".into(),
                                            "icons/icon.ico".into(),
                                        ]),
                                    ),
                                    targets: Default::default(),
                                    create_updater_artifacts: Default::default(),
                                    resources: None,
                                    copyright: None,
                                    category: None,
                                    license: ::core::option::Option::None,
                                    license_file: ::core::option::Option::None,
                                    file_associations: None,
                                    short_description: None,
                                    long_description: None,
                                    use_local_tools_dir: false,
                                    external_bin: ::core::option::Option::None,
                                    windows: ::tauri::utils::config::WindowsConfig {
                                        webview_install_mode: ::tauri::utils::config::WebviewInstallMode::DownloadBootstrapper {
                                            silent: true,
                                        },
                                        ..Default::default()
                                    },
                                    linux: Default::default(),
                                    macos: Default::default(),
                                    ios: Default::default(),
                                    android: Default::default(),
                                },
                                plugins: ::tauri::utils::config::PluginConfig(
                                    ::std::collections::HashMap::new(),
                                ),
                            },
                            ::std::boxed::Box::new({
                                #[allow(unused_imports)]
                                use ::tauri::utils::assets::{
                                    CspHash, EmbeddedAssets, phf, phf::phf_map,
                                };
                                EmbeddedAssets::new(
                                    phf::Map {
                                        key: 12913932095322966823u64,
                                        disps: &[],
                                        entries: &[],
                                    },
                                    &[],
                                    phf::Map {
                                        key: 12913932095322966823u64,
                                        disps: &[],
                                        entries: &[],
                                    },
                                )
                            }),
                            ::std::option::Option::Some(
                                ::tauri::image::Image::new(
                                    b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0\x10\xff\xbf0 \xff\xbf00\xff\xbf0\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0\x10\xff\xc12\x80\xff\xc11\xdf\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xdf\xff\xc22\x9f\xff\xbf0 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc22`\xff\xc11\xef\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc12\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc12\x80\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc00\xdf\xff\xc00\x9f\xff\xc00\xaf\xff\xc00\xcf\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc22\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0`\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc00\xbf\xff\xc21?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0 \xff\xc00\x9f\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc12\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0 \xff\xc11\xdf\xff\xc11\xff\xff\xc11\xff\xff\xc10\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0p\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xbf0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc22\x9f\xff\xc11\xef\xff\xc00\x9f\xff\xc10_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc10\x8f\xff\xc11\xff\xff\xc11\xff\xff\xc21\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0\x10\xff\xbf0\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0\x10\xff\xc11\xef\xff\xc11\xff\xff\xc11\xff\xff\xbf0\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#\xc9\xdcP#\xc8\xdc\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc12\x80\xff\xc11\xff\xff\xc11\xff\xff\xc22\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc10\x8f\xff\xc11\xff\xff\xc11\xff\xff\xc20O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb@%\xc8\xdc\xdf$\xc8\xdb\xff$\xc8\xdb\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0@\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc10_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0`\xff\xc11\xff\xff\xc11\xff\xff\xc10o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb\x80$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xdc\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0`\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc10\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0@\xff\xc11\xff\xff\xc11\xff\xff\xc10\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc6\xdbp$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xbf%\xc5\xda0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0\x10\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc20O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc10o\xff\xc11\xff\xff\xc11\xff\xff\xc10o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\xc7\xdf $\xc7\xdc\xef$\xc8\xdb\xff$\xc8\xdb\xff$\xc9\xda\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0P\xff\xc00\xcf\xff\xc00\xdf\xff\xc10o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc22\x9f\xff\xc11\xff\xff\xc11\xff\xff\xc21?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\xc8\xdc\x9f$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xda\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0 \xff\xc11\xff\xff\xc11\xff\xff\xc11\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xcf\xdf\x10$\xc8\xdb\xff$\xc8\xdb\xff$\xc7\xdb\xef \xc7\xd7 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc22\x9f\xff\xc11\xff\xff\xc11\xff\xff\xc00\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb@$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xda\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc6\xdbp%\xc8\xda\xdf$\xc9\xda\xcf#\xc9\xd9P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc12\x90\xff\xc11\xff\xff\xc11\xff\xff\xc11\xdf\xff\xbf0 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xdbO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#\xc9\xdcP$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff \xcf\xcf\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xbf0@\xff\xc11\xcf\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc10_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff$\xca\xdb?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff#\xc9\xdc_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc21\xbf\xff\xc11\xff\xff\xc11\xff\xff\xc11\xff\xff\xc10o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff#\xc9\xdc_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\xc7\xda`$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xca\xdb?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc21\xbf\xff\xc11\xff\xff\xc11\xdf\xff\xc21?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\xc7\xda`$\xc8\xdb\xff$\xc8\xdb\xff$\xc9\xda\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x8f$\xc8\xdb\xff$\xc7\xdb\xef$\xc9\xdb\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc10\x8f\xff\xc21?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xcf\xdf\x10$\xc8\xdb\xff$\xc8\xdb\xff$\xc7\xdb\xef \xcf\xcf\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xcf\xcf\x10 \xcf\xcf\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xcf\xdf\x10$\xc7\xdb@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc8\xdb\xbf$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\xc7\xda`$\xc8\xdb\xaf$\xc7\xdc\xef$\xc9\xdb\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb@$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc6\xd8p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb\x80$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xda\xdf \xc7\xd7 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff#\xc8\xdc\x9f \xc7\xdf \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc7\xdb@$\xc8\xdb\xbf$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff#\xc9\xdc_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x8f$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc9\xda\xcf$\xc8\xdb\xaf$\xc8\xdb\xaf%\xc8\xda\xdf$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc9\xdb\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\xc9\xdb\x7f$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc7\xdb\xef#\xc9\xd9P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\xc7\xd7 %\xc8\xda\x9f%\xc8\xda\xdf$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xff$\xc8\xdb\xbf$\xc9\xdb\x7f \xcf\xcf\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xcf\xcf\x10!\xce\xde\x1f!\xce\xde\x1f \xcf\xcf\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                                    32u32,
                                    32u32,
                                ),
                            ),
                            ::std::option::Option::None,
                            ::tauri::PackageInfo {
                                name: "example-v2-beta".to_string(),
                                version: "0.0.0".to_string().parse().unwrap(),
                                authors: "you",
                                description: "A Tauri App",
                                crate_name: "example-v2-beta",
                            },
                            ::tauri::Pattern::Brownfield,
                            ::tauri::ipc::RuntimeAuthority::new(
                                {
                                    let mut map = ::std::collections::BTreeMap::new();
                                    map.insert(
                                        "core".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default core plugins set which includes:\n- 'core:path:default'\n- 'core:event:default'\n- 'core:window:default'\n- 'core:webview:default'\n- 'core:app:default'\n- 'core:image:default'\n- 'core:resources:default'\n- 'core:menu:default'\n- 'core:tray:default'\n"
                                                    .into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "core:path:default".into(),
                                                        "core:event:default".into(),
                                                        "core:window:default".into(),
                                                        "core:webview:default".into(),
                                                        "core:app:default".into(),
                                                        "core:image:default".into(),
                                                        "core:resources:default".into(),
                                                        "core:menu:default".into(),
                                                        "core:tray:default".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: ::std::collections::BTreeMap::new(),
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:app".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-version".into(),
                                                        "allow-name".into(),
                                                        "allow-tauri-version".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-app-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-app-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the app_hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["app_hide".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-app-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-app-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the app_show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["app_show".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-default-window-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-default-window-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the default_window_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["default_window_icon".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-name".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-name".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the name command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["name".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-app-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-app-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_app_theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_app_theme".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-tauri-version".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-tauri-version".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the tauri_version command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["tauri_version".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-version".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-version".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the version command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["version".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-app-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-app-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the app_hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["app_hide".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-app-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-app-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the app_show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["app_show".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-default-window-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-default-window-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the default_window_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["default_window_icon".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-name".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-name".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the name command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["name".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-app-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-app-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_app_theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_app_theme".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-tauri-version".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-tauri-version".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the tauri_version command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["tauri_version".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-version".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-version".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the version command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["version".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:event".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-listen".into(),
                                                        "allow-unlisten".into(),
                                                        "allow-emit".into(),
                                                        "allow-emit-to".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-emit".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-emit".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the emit command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["emit".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-emit-to".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-emit-to".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the emit_to command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["emit_to".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-listen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-listen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the listen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["listen".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-unlisten".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-unlisten".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the unlisten command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unlisten".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-emit".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-emit".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the emit command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["emit".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-emit-to".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-emit-to".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the emit_to command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["emit_to".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-listen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-listen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the listen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["listen".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-unlisten".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-unlisten".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the unlisten command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unlisten".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:image".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-new".into(),
                                                        "allow-from-bytes".into(),
                                                        "allow-from-path".into(),
                                                        "allow-rgba".into(),
                                                        "allow-size".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-from-bytes".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-from-bytes".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the from_bytes command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["from_bytes".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-from-path".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-from-path".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the from_path command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["from_path".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-rgba".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-rgba".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the rgba command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["rgba".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-from-bytes".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-from-bytes".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the from_bytes command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["from_bytes".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-from-path".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-from-path".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the from_path command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["from_path".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-rgba".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-rgba".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the rgba command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["rgba".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:menu".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-new".into(),
                                                        "allow-append".into(),
                                                        "allow-prepend".into(),
                                                        "allow-insert".into(),
                                                        "allow-remove".into(),
                                                        "allow-remove-at".into(),
                                                        "allow-items".into(),
                                                        "allow-get".into(),
                                                        "allow-popup".into(),
                                                        "allow-create-default".into(),
                                                        "allow-set-as-app-menu".into(),
                                                        "allow-set-as-window-menu".into(),
                                                        "allow-text".into(),
                                                        "allow-set-text".into(),
                                                        "allow-is-enabled".into(),
                                                        "allow-set-enabled".into(),
                                                        "allow-set-accelerator".into(),
                                                        "allow-set-as-windows-menu-for-nsapp".into(),
                                                        "allow-set-as-help-menu-for-nsapp".into(),
                                                        "allow-is-checked".into(),
                                                        "allow-set-checked".into(),
                                                        "allow-set-icon".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-append".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-append".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the append command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["append".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-create-default".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-create-default".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the create_default command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_default".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-get".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-get".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the get command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-insert".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-insert".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the insert command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["insert".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-checked".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-checked".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_checked command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_checked".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_enabled".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-items".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-items".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the items command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["items".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-popup".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-popup".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the popup command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["popup".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-prepend".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-prepend".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the prepend command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["prepend".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-remove".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-remove".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the remove command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-remove-at".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-remove-at".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the remove_at command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove_at".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-accelerator".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-accelerator".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_accelerator command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_accelerator".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-as-app-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-as-app-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_as_app_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_as_app_menu".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-as-help-menu-for-nsapp".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-as-help-menu-for-nsapp".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_as_help_menu_for_nsapp".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-as-window-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-as-window-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_as_window_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_as_window_menu".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-as-windows-menu-for-nsapp".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-as-windows-menu-for-nsapp".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_as_windows_menu_for_nsapp".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-checked".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-checked".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_checked command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_checked".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_enabled".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-text".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-text".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_text command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_text".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-text".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-text".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the text command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["text".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-append".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-append".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the append command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["append".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-create-default".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-create-default".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the create_default command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_default".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-get".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-get".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the get command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-insert".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-insert".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the insert command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["insert".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-checked".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-checked".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_checked command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_checked".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_enabled".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-items".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-items".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the items command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["items".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-popup".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-popup".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the popup command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["popup".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-prepend".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-prepend".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the prepend command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["prepend".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-remove".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-remove".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the remove command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-remove-at".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-remove-at".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the remove_at command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove_at".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-accelerator".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-accelerator".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_accelerator command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_accelerator".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-as-app-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-as-app-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_as_app_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_as_app_menu".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-as-help-menu-for-nsapp".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-as-help-menu-for-nsapp".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_as_help_menu_for_nsapp".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-as-window-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-as-window-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_as_window_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_as_window_menu".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-as-windows-menu-for-nsapp".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-as-windows-menu-for-nsapp".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_as_windows_menu_for_nsapp".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-checked".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-checked".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_checked command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_checked".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_enabled".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-text".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-text".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_text command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_text".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-text".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-text".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the text command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["text".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:path".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-resolve-directory".into(),
                                                        "allow-resolve".into(),
                                                        "allow-normalize".into(),
                                                        "allow-join".into(),
                                                        "allow-dirname".into(),
                                                        "allow-extname".into(),
                                                        "allow-basename".into(),
                                                        "allow-is-absolute".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-basename".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-basename".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the basename command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["basename".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-dirname".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-dirname".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the dirname command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["dirname".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-extname".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-extname".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the extname command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["extname".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-absolute".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-absolute".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_absolute command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_absolute".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-join".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-join".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the join command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["join".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-normalize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-normalize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the normalize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["normalize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-resolve".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-resolve".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the resolve command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["resolve".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-resolve-directory".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-resolve-directory".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the resolve_directory command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["resolve_directory".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-basename".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-basename".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the basename command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["basename".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-dirname".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-dirname".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the dirname command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["dirname".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-extname".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-extname".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the extname command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["extname".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-absolute".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-absolute".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_absolute command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_absolute".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-join".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-join".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the join command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["join".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-normalize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-normalize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the normalize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["normalize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-resolve".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-resolve".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the resolve command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["resolve".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-resolve-directory".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-resolve-directory".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the resolve_directory command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["resolve_directory".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:resources".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new(["allow-close".into()]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["close".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["close".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:tray".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-new".into(),
                                                        "allow-get-by-id".into(),
                                                        "allow-remove-by-id".into(),
                                                        "allow-set-icon".into(),
                                                        "allow-set-menu".into(),
                                                        "allow-set-tooltip".into(),
                                                        "allow-set-title".into(),
                                                        "allow-set-visible".into(),
                                                        "allow-set-temp-dir-path".into(),
                                                        "allow-set-icon-as-template".into(),
                                                        "allow-set-show-menu-on-left-click".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-get-by-id".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-get-by-id".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the get_by_id command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_by_id".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-remove-by-id".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-remove-by-id".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the remove_by_id command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove_by_id".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-icon-as-template".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-icon-as-template".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_icon_as_template command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon_as_template".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_menu".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-show-menu-on-left-click".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-show-menu-on-left-click".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_show_menu_on_left_click command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_show_menu_on_left_click".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-temp-dir-path".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-temp-dir-path".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_temp_dir_path command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_temp_dir_path".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-tooltip".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-tooltip".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_tooltip command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_tooltip".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_visible".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-get-by-id".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-get-by-id".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the get_by_id command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_by_id".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-new".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-new".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the new command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["new".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-remove-by-id".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-remove-by-id".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the remove_by_id command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["remove_by_id".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-icon-as-template".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-icon-as-template".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_icon_as_template command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon_as_template".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-menu".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-menu".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_menu command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_menu".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-show-menu-on-left-click".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-show-menu-on-left-click".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_show_menu_on_left_click command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_show_menu_on_left_click".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-temp-dir-path".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-temp-dir-path".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_temp_dir_path command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_temp_dir_path".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-tooltip".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-tooltip".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_tooltip command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_tooltip".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_visible".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:webview".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-get-all-webviews".into(),
                                                        "allow-webview-position".into(),
                                                        "allow-webview-size".into(),
                                                        "allow-internal-toggle-devtools".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-clear-all-browsing-data".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-clear-all-browsing-data".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the clear_all_browsing_data command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["clear_all_browsing_data".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-create-webview".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-create-webview".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the create_webview command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_webview".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-create-webview-window".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-create-webview-window".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the create_webview_window command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_webview_window".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-get-all-webviews".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-get-all-webviews".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the get_all_webviews command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_all_webviews".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-internal-toggle-devtools".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-internal-toggle-devtools".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the internal_toggle_devtools command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "internal_toggle_devtools".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-print".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-print".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the print command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["print".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-reparent".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-reparent".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the reparent command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["reparent".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-webview-focus".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-webview-focus".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_webview_focus command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_focus".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-webview-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-webview-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_webview_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-webview-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-webview-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_webview_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-webview-zoom".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-webview-zoom".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_webview_zoom command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_zoom".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-webview-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-webview-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the webview_close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_close".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-webview-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-webview-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the webview_hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_hide".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-webview-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-webview-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the webview_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-webview-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-webview-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the webview_show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_show".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-webview-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-webview-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the webview_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-clear-all-browsing-data".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-clear-all-browsing-data".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the clear_all_browsing_data command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["clear_all_browsing_data".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-create-webview".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-create-webview".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the create_webview command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_webview".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-create-webview-window".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-create-webview-window".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the create_webview_window command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create_webview_window".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-get-all-webviews".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-get-all-webviews".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the get_all_webviews command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_all_webviews".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-internal-toggle-devtools".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-internal-toggle-devtools".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the internal_toggle_devtools command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "internal_toggle_devtools".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-print".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-print".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the print command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["print".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-reparent".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-reparent".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the reparent command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["reparent".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-webview-focus".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-webview-focus".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_webview_focus command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_focus".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-webview-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-webview-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_webview_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-webview-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-webview-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_webview_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-webview-zoom".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-webview-zoom".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_webview_zoom command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_webview_zoom".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-webview-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-webview-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the webview_close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_close".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-webview-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-webview-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the webview_hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_hide".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-webview-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-webview-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the webview_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-webview-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-webview-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the webview_show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_show".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-webview-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-webview-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the webview_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["webview_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "core:window".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "Default permissions for the plugin.".into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new([
                                                        "allow-get-all-windows".into(),
                                                        "allow-scale-factor".into(),
                                                        "allow-inner-position".into(),
                                                        "allow-outer-position".into(),
                                                        "allow-inner-size".into(),
                                                        "allow-outer-size".into(),
                                                        "allow-is-fullscreen".into(),
                                                        "allow-is-minimized".into(),
                                                        "allow-is-maximized".into(),
                                                        "allow-is-focused".into(),
                                                        "allow-is-decorated".into(),
                                                        "allow-is-resizable".into(),
                                                        "allow-is-maximizable".into(),
                                                        "allow-is-minimizable".into(),
                                                        "allow-is-closable".into(),
                                                        "allow-is-visible".into(),
                                                        "allow-is-enabled".into(),
                                                        "allow-title".into(),
                                                        "allow-current-monitor".into(),
                                                        "allow-primary-monitor".into(),
                                                        "allow-monitor-from-point".into(),
                                                        "allow-available-monitors".into(),
                                                        "allow-cursor-position".into(),
                                                        "allow-theme".into(),
                                                        "allow-internal-toggle-maximize".into(),
                                                    ]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-available-monitors".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-available-monitors".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the available_monitors command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["available_monitors".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-center".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-center".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the center command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["center".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["close".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-create".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-create".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the create command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-current-monitor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-current-monitor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the current_monitor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["current_monitor".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-cursor-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-cursor-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the cursor_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["cursor_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-destroy".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-destroy".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the destroy command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["destroy".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-get-all-windows".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-get-all-windows".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the get_all_windows command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_all_windows".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["hide".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-inner-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-inner-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the inner_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["inner_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-inner-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-inner-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the inner_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["inner_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-internal-toggle-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-internal-toggle-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the internal_toggle_maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "internal_toggle_maximize".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-closable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-closable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_closable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_closable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-decorated".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-decorated".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_decorated command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_decorated".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_enabled".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-focused".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-focused".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_focused command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_focused".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-fullscreen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-fullscreen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_fullscreen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_fullscreen".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-maximizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-maximizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_maximizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_maximizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-maximized".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-maximized".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_maximized command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_maximized".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-minimizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-minimizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_minimizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_minimizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-minimized".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-minimized".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_minimized command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_minimized".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-resizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-resizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_resizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_resizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-is-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-is-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the is_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_visible".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["maximize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-minimize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-minimize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the minimize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["minimize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-monitor-from-point".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-monitor-from-point".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the monitor_from_point command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["monitor_from_point".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-outer-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-outer-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the outer_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["outer_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-outer-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-outer-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the outer_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["outer_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-primary-monitor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-primary-monitor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the primary_monitor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["primary_monitor".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-request-user-attention".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-request-user-attention".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the request_user_attention command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["request_user_attention".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-scale-factor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-scale-factor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the scale_factor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["scale_factor".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-always-on-bottom".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-always-on-bottom".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_always_on_bottom command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_always_on_bottom".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-always-on-top".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-always-on-top".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_always_on_top command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_always_on_top".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-closable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-closable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_closable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_closable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-content-protected".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-content-protected".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_content_protected command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_content_protected".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-cursor-grab".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-cursor-grab".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_cursor_grab command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_grab".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-cursor-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-cursor-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_cursor_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_icon".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-cursor-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-cursor-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_cursor_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-cursor-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-cursor-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_cursor_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_visible".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-decorations".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-decorations".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_decorations command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_decorations".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-effects".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-effects".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_effects command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_effects".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_enabled".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-focus".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-focus".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_focus command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_focus".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-fullscreen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-fullscreen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_fullscreen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_fullscreen".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-ignore-cursor-events".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-ignore-cursor-events".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_ignore_cursor_events command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_ignore_cursor_events".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-max-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-max-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_max_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_max_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-maximizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-maximizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_maximizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_maximizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-min-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-min-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_min_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_min_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-minimizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-minimizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_minimizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_minimizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_position".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-progress-bar".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-progress-bar".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_progress_bar command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_progress_bar".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-resizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-resizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_resizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_resizable".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-shadow".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-shadow".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_shadow command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_shadow".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_size".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-size-constraints".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-size-constraints".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_size_constraints command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_size_constraints".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-skip-taskbar".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-skip-taskbar".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_skip_taskbar command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_skip_taskbar".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_theme".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-title-bar-style".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-title-bar-style".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_title_bar_style command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title_bar_style".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-set-visible-on-all-workspaces".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-set-visible-on-all-workspaces".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the set_visible_on_all_workspaces command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_visible_on_all_workspaces".into(),
                                                                ]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["show".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-start-dragging".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-start-dragging".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the start_dragging command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["start_dragging".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-start-resize-dragging".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-start-resize-dragging".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the start_resize_dragging command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["start_resize_dragging".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["theme".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["title".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-toggle-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-toggle-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the toggle_maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["toggle_maximize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-unmaximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-unmaximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the unmaximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unmaximize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-unminimize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-unminimize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the unminimize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unminimize".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-available-monitors".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-available-monitors".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the available_monitors command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["available_monitors".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-center".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-center".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the center command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["center".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-close".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-close".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the close command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["close".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-create".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-create".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the create command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["create".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-current-monitor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-current-monitor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the current_monitor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["current_monitor".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-cursor-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-cursor-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the cursor_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["cursor_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-destroy".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-destroy".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the destroy command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["destroy".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-get-all-windows".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-get-all-windows".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the get_all_windows command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["get_all_windows".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-hide".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-hide".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the hide command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["hide".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-inner-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-inner-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the inner_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["inner_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-inner-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-inner-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the inner_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["inner_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-internal-toggle-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-internal-toggle-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the internal_toggle_maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "internal_toggle_maximize".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-closable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-closable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_closable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_closable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-decorated".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-decorated".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_decorated command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_decorated".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_enabled".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-focused".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-focused".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_focused command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_focused".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-fullscreen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-fullscreen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_fullscreen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_fullscreen".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-maximizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-maximizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_maximizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_maximizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-maximized".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-maximized".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_maximized command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_maximized".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-minimizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-minimizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_minimizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_minimizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-minimized".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-minimized".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_minimized command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_minimized".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-resizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-resizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_resizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_resizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-is-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-is-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the is_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["is_visible".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["maximize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-minimize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-minimize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the minimize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["minimize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-monitor-from-point".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-monitor-from-point".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the monitor_from_point command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["monitor_from_point".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-outer-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-outer-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the outer_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["outer_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-outer-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-outer-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the outer_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["outer_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-primary-monitor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-primary-monitor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the primary_monitor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["primary_monitor".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-request-user-attention".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-request-user-attention".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the request_user_attention command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["request_user_attention".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-scale-factor".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-scale-factor".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the scale_factor command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["scale_factor".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-always-on-bottom".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-always-on-bottom".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_always_on_bottom command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_always_on_bottom".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-always-on-top".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-always-on-top".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_always_on_top command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_always_on_top".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-closable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-closable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_closable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_closable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-content-protected".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-content-protected".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_content_protected command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_content_protected".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-cursor-grab".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-cursor-grab".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_cursor_grab command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_grab".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-cursor-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-cursor-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_cursor_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_icon".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-cursor-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-cursor-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_cursor_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-cursor-visible".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-cursor-visible".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_cursor_visible command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_cursor_visible".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-decorations".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-decorations".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_decorations command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_decorations".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-effects".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-effects".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_effects command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_effects".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-enabled".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-enabled".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_enabled command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_enabled".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-focus".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-focus".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_focus command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_focus".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-fullscreen".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-fullscreen".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_fullscreen command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_fullscreen".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-icon".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-icon".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_icon command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_icon".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-ignore-cursor-events".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-ignore-cursor-events".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_ignore_cursor_events command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_ignore_cursor_events".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-max-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-max-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_max_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_max_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-maximizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-maximizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_maximizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_maximizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-min-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-min-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_min_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_min_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-minimizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-minimizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_minimizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_minimizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-position".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-position".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_position command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_position".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-progress-bar".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-progress-bar".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_progress_bar command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_progress_bar".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-resizable".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-resizable".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_resizable command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_resizable".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-shadow".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-shadow".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_shadow command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_shadow".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-size".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-size".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_size command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_size".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-size-constraints".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-size-constraints".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_size_constraints command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_size_constraints".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-skip-taskbar".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-skip-taskbar".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_skip_taskbar command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_skip_taskbar".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_theme".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-title-bar-style".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-title-bar-style".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_title_bar_style command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["set_title_bar_style".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-set-visible-on-all-workspaces".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-set-visible-on-all-workspaces".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the set_visible_on_all_workspaces command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    "set_visible_on_all_workspaces".into(),
                                                                ]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-show".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-show".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the show command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["show".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-start-dragging".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-start-dragging".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the start_dragging command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["start_dragging".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-start-resize-dragging".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-start-resize-dragging".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the start_resize_dragging command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["start_resize_dragging".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-theme".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-theme".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the theme command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["theme".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-title".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-title".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the title command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["title".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-toggle-maximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-toggle-maximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the toggle_maximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["toggle_maximize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-unmaximize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-unmaximize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the unmaximize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unmaximize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-unminimize".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-unminimize".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the unminimize command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["unminimize".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::None,
                                        },
                                    );
                                    map.insert(
                                        "shell".into(),
                                        ::tauri::utils::acl::manifest::Manifest {
                                            default_permission: ::core::option::Option::Some(::tauri::utils::acl::PermissionSet {
                                                identifier: "default".into(),
                                                description: "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality without any specific\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n"
                                                    .into(),
                                                permissions: <[_]>::into_vec(
                                                    #[rustc_box]
                                                    ::alloc::boxed::Box::new(["allow-open".into()]),
                                                ),
                                            }),
                                            permissions: {
                                                let mut map = ::std::collections::BTreeMap::new();
                                                map.insert(
                                                    "allow-execute".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-execute".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the execute command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["execute".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-kill".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-kill".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the kill command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["kill".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-open".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-open".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the open command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["open".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-spawn".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-spawn".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the spawn command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["spawn".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "allow-stdin-write".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "allow-stdin-write".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Enables the stdin_write command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["stdin_write".into()]),
                                                            ),
                                                            deny: ::alloc::vec::Vec::new(),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-execute".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-execute".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the execute command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["execute".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-kill".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-kill".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the kill command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["kill".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-open".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-open".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the open command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["open".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-spawn".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-spawn".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the spawn command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["spawn".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map.insert(
                                                    "deny-stdin-write".into(),
                                                    ::tauri::utils::acl::Permission {
                                                        version: ::core::option::Option::None,
                                                        identifier: "deny-stdin-write".into(),
                                                        description: ::core::option::Option::Some(
                                                            "Denies the stdin_write command without any pre-configured scope."
                                                                .into(),
                                                        ),
                                                        commands: ::tauri::utils::acl::Commands {
                                                            allow: ::alloc::vec::Vec::new(),
                                                            deny: <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new(["stdin_write".into()]),
                                                            ),
                                                        },
                                                        scope: ::tauri::utils::acl::Scopes {
                                                            allow: ::core::option::Option::None,
                                                            deny: ::core::option::Option::None,
                                                        },
                                                        platforms: ::core::option::Option::None,
                                                    },
                                                );
                                                map
                                            },
                                            permission_sets: ::std::collections::BTreeMap::new(),
                                            global_scope_schema: ::core::option::Option::Some(
                                                ::serde_json::Value::Object({
                                                    let mut map = ::serde_json::Map::new();
                                                    map.insert(
                                                        "$schema".into(),
                                                        ::serde_json::Value::String(
                                                            "http://json-schema.org/draft-07/schema#".into(),
                                                        ),
                                                    );
                                                    map.insert(
                                                        "anyOf".into(),
                                                        ::serde_json::Value::Array(
                                                            <[_]>::into_vec(
                                                                #[rustc_box]
                                                                ::alloc::boxed::Box::new([
                                                                    ::serde_json::Value::Object({
                                                                        let mut map = ::serde_json::Map::new();
                                                                        map.insert(
                                                                            "additionalProperties".into(),
                                                                            ::serde_json::Value::Bool(false),
                                                                        );
                                                                        map.insert(
                                                                            "properties".into(),
                                                                            ::serde_json::Value::Object({
                                                                                let mut map = ::serde_json::Map::new();
                                                                                map.insert(
                                                                                    "args".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "allOf".into(),
                                                                                            ::serde_json::Value::Array(
                                                                                                <[_]>::into_vec(
                                                                                                    #[rustc_box]
                                                                                                    ::alloc::boxed::Box::new([
                                                                                                        ::serde_json::Value::Object({
                                                                                                            let mut map = ::serde_json::Map::new();
                                                                                                            map.insert(
                                                                                                                "$ref".into(),
                                                                                                                ::serde_json::Value::String(
                                                                                                                    "#/definitions/ShellScopeEntryAllowedArgs".into(),
                                                                                                                ),
                                                                                                            );
                                                                                                            map
                                                                                                        }),
                                                                                                    ]),
                                                                                                ),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "The allowed arguments for the command execution.".into(),
                                                                                            ),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map.insert(
                                                                                    "cmd".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("string".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map.insert(
                                                                                    "name".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("string".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map
                                                                            }),
                                                                        );
                                                                        map.insert(
                                                                            "required".into(),
                                                                            ::serde_json::Value::Array(
                                                                                <[_]>::into_vec(
                                                                                    #[rustc_box]
                                                                                    ::alloc::boxed::Box::new([
                                                                                        ::serde_json::Value::String("cmd".into()),
                                                                                        ::serde_json::Value::String("name".into()),
                                                                                    ]),
                                                                                ),
                                                                            ),
                                                                        );
                                                                        map.insert(
                                                                            "type".into(),
                                                                            ::serde_json::Value::String("object".into()),
                                                                        );
                                                                        map
                                                                    }),
                                                                    ::serde_json::Value::Object({
                                                                        let mut map = ::serde_json::Map::new();
                                                                        map.insert(
                                                                            "additionalProperties".into(),
                                                                            ::serde_json::Value::Bool(false),
                                                                        );
                                                                        map.insert(
                                                                            "properties".into(),
                                                                            ::serde_json::Value::Object({
                                                                                let mut map = ::serde_json::Map::new();
                                                                                map.insert(
                                                                                    "args".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "allOf".into(),
                                                                                            ::serde_json::Value::Array(
                                                                                                <[_]>::into_vec(
                                                                                                    #[rustc_box]
                                                                                                    ::alloc::boxed::Box::new([
                                                                                                        ::serde_json::Value::Object({
                                                                                                            let mut map = ::serde_json::Map::new();
                                                                                                            map.insert(
                                                                                                                "$ref".into(),
                                                                                                                ::serde_json::Value::String(
                                                                                                                    "#/definitions/ShellScopeEntryAllowedArgs".into(),
                                                                                                                ),
                                                                                                            );
                                                                                                            map
                                                                                                        }),
                                                                                                    ]),
                                                                                                ),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "The allowed arguments for the command execution.".into(),
                                                                                            ),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map.insert(
                                                                                    "name".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("string".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map.insert(
                                                                                    "sidecar".into(),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "If this command is a sidecar command.".into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("boolean".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                );
                                                                                map
                                                                            }),
                                                                        );
                                                                        map.insert(
                                                                            "required".into(),
                                                                            ::serde_json::Value::Array(
                                                                                <[_]>::into_vec(
                                                                                    #[rustc_box]
                                                                                    ::alloc::boxed::Box::new([
                                                                                        ::serde_json::Value::String("name".into()),
                                                                                        ::serde_json::Value::String("sidecar".into()),
                                                                                    ]),
                                                                                ),
                                                                            ),
                                                                        );
                                                                        map.insert(
                                                                            "type".into(),
                                                                            ::serde_json::Value::String("object".into()),
                                                                        );
                                                                        map
                                                                    }),
                                                                ]),
                                                            ),
                                                        ),
                                                    );
                                                    map.insert(
                                                        "definitions".into(),
                                                        ::serde_json::Value::Object({
                                                            let mut map = ::serde_json::Map::new();
                                                            map.insert(
                                                                "ShellScopeEntryAllowedArg".into(),
                                                                ::serde_json::Value::Object({
                                                                    let mut map = ::serde_json::Map::new();
                                                                    map.insert(
                                                                        "anyOf".into(),
                                                                        ::serde_json::Value::Array(
                                                                            <[_]>::into_vec(
                                                                                #[rustc_box]
                                                                                ::alloc::boxed::Box::new([
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "A non-configurable argument that is passed to the command in the order it was specified."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("string".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "additionalProperties".into(),
                                                                                            ::serde_json::Value::Bool(false),
                                                                                        );
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "A variable that is set while calling the command from the webview API."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "properties".into(),
                                                                                            ::serde_json::Value::Object({
                                                                                                let mut map = ::serde_json::Map::new();
                                                                                                map.insert(
                                                                                                    "raw".into(),
                                                                                                    ::serde_json::Value::Object({
                                                                                                        let mut map = ::serde_json::Map::new();
                                                                                                        map.insert(
                                                                                                            "default".into(),
                                                                                                            ::serde_json::Value::Bool(false),
                                                                                                        );
                                                                                                        map.insert(
                                                                                                            "description".into(),
                                                                                                            ::serde_json::Value::String(
                                                                                                                "Marks the validator as a raw regex, meaning the plugin should not make any modification at runtime.\n\nThis means the regex will not match on the entire string by default, which might be exploited if your regex allow unexpected input to be considered valid. When using this option, make sure your regex is correct."
                                                                                                                    .into(),
                                                                                                            ),
                                                                                                        );
                                                                                                        map.insert(
                                                                                                            "type".into(),
                                                                                                            ::serde_json::Value::String("boolean".into()),
                                                                                                        );
                                                                                                        map
                                                                                                    }),
                                                                                                );
                                                                                                map.insert(
                                                                                                    "validator".into(),
                                                                                                    ::serde_json::Value::Object({
                                                                                                        let mut map = ::serde_json::Map::new();
                                                                                                        map.insert(
                                                                                                            "description".into(),
                                                                                                            ::serde_json::Value::String(
                                                                                                                "[regex] validator to require passed values to conform to an expected input.\n\nThis will require the argument value passed to this variable to match the `validator` regex before it will be executed.\n\nThe regex string is by default surrounded by `^...$` to match the full string. For example the `https?://\\w+` regex would be registered as `^https?://\\w+$`.\n\n[regex]: <https://docs.rs/regex/latest/regex/#syntax>"
                                                                                                                    .into(),
                                                                                                            ),
                                                                                                        );
                                                                                                        map.insert(
                                                                                                            "type".into(),
                                                                                                            ::serde_json::Value::String("string".into()),
                                                                                                        );
                                                                                                        map
                                                                                                    }),
                                                                                                );
                                                                                                map
                                                                                            }),
                                                                                        );
                                                                                        map.insert(
                                                                                            "required".into(),
                                                                                            ::serde_json::Value::Array(
                                                                                                <[_]>::into_vec(
                                                                                                    #[rustc_box]
                                                                                                    ::alloc::boxed::Box::new([
                                                                                                        ::serde_json::Value::String("validator".into()),
                                                                                                    ]),
                                                                                                ),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("object".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                ]),
                                                                            ),
                                                                        ),
                                                                    );
                                                                    map.insert(
                                                                        "description".into(),
                                                                        ::serde_json::Value::String(
                                                                            "A command argument allowed to be executed by the webview API."
                                                                                .into(),
                                                                        ),
                                                                    );
                                                                    map
                                                                }),
                                                            );
                                                            map.insert(
                                                                "ShellScopeEntryAllowedArgs".into(),
                                                                ::serde_json::Value::Object({
                                                                    let mut map = ::serde_json::Map::new();
                                                                    map.insert(
                                                                        "anyOf".into(),
                                                                        ::serde_json::Value::Array(
                                                                            <[_]>::into_vec(
                                                                                #[rustc_box]
                                                                                ::alloc::boxed::Box::new([
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "Use a simple boolean to allow all or disable all arguments to this command configuration."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("boolean".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                    ::serde_json::Value::Object({
                                                                                        let mut map = ::serde_json::Map::new();
                                                                                        map.insert(
                                                                                            "description".into(),
                                                                                            ::serde_json::Value::String(
                                                                                                "A specific set of [`ShellScopeEntryAllowedArg`] that are valid to call for the command configuration."
                                                                                                    .into(),
                                                                                            ),
                                                                                        );
                                                                                        map.insert(
                                                                                            "items".into(),
                                                                                            ::serde_json::Value::Object({
                                                                                                let mut map = ::serde_json::Map::new();
                                                                                                map.insert(
                                                                                                    "$ref".into(),
                                                                                                    ::serde_json::Value::String(
                                                                                                        "#/definitions/ShellScopeEntryAllowedArg".into(),
                                                                                                    ),
                                                                                                );
                                                                                                map
                                                                                            }),
                                                                                        );
                                                                                        map.insert(
                                                                                            "type".into(),
                                                                                            ::serde_json::Value::String("array".into()),
                                                                                        );
                                                                                        map
                                                                                    }),
                                                                                ]),
                                                                            ),
                                                                        ),
                                                                    );
                                                                    map.insert(
                                                                        "description".into(),
                                                                        ::serde_json::Value::String(
                                                                            "A set of command arguments allowed to be executed by the webview API.\n\nA value of `true` will allow any arguments to be passed to the command. `false` will disable all arguments. A list of [`ShellScopeEntryAllowedArg`] will set those arguments as the only valid arguments to be passed to the attached command configuration."
                                                                                .into(),
                                                                        ),
                                                                    );
                                                                    map
                                                                }),
                                                            );
                                                            map
                                                        }),
                                                    );
                                                    map.insert(
                                                        "description".into(),
                                                        ::serde_json::Value::String("Shell scope entry.".into()),
                                                    );
                                                    map.insert(
                                                        "title".into(),
                                                        ::serde_json::Value::String("ShellScopeEntry".into()),
                                                    );
                                                    map
                                                }),
                                            ),
                                        },
                                    );
                                    map
                                },
                                ::tauri::utils::acl::resolved::Resolved {
                                    allowed_commands: {
                                        let mut map = ::std::collections::BTreeMap::new();
                                        map.insert(
                                            "plugin:app|name".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-name".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:app|tauri_version".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-tauri-version".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:app|version".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-version".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:event|emit".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-emit".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:event|emit_to".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-emit-to".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:event|listen".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-listen".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:event|unlisten".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-unlisten".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:image|from_bytes".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-from-bytes".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:image|from_path".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-from-path".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:image|new".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-new".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:image|rgba".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-rgba".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:image|size".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-size".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|append".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-append".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|create_default".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-create-default".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|get".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-get".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|insert".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-insert".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|is_checked".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-checked".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|is_enabled".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-enabled".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|items".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-items".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|new".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-new".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|popup".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-popup".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|prepend".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-prepend".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|remove".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-remove".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|remove_at".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-remove-at".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_accelerator".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-accelerator".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_as_app_menu".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-as-app-menu".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_as_help_menu_for_nsapp".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-as-help-menu-for-nsapp".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_as_window_menu".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-as-window-menu".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_as_windows_menu_for_nsapp".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-as-windows-menu-for-nsapp".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_checked".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-checked".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_enabled".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-enabled".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_icon".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-icon".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|set_text".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-text".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:menu|text".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-text".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|basename".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-basename".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|dirname".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-dirname".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|extname".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-extname".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|is_absolute".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-absolute".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|join".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-join".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|normalize".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-normalize".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|resolve".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-resolve".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:path|resolve_directory".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-resolve-directory".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:resources|close".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-close".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:shell|open".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-open".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|get_by_id".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-get-by-id".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|new".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-new".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|remove_by_id".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-remove-by-id".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_icon".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-icon".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_icon_as_template".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-icon-as-template".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_menu".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-menu".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_show_menu_on_left_click".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-show-menu-on-left-click".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_temp_dir_path".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-temp-dir-path".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_title".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-title".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_tooltip".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-tooltip".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:tray|set_visible".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-set-visible".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|available_monitors".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-available-monitors".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|current_monitor".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-current-monitor".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|cursor_position".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-cursor-position".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|get_all_windows".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-get-all-windows".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|inner_position".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-inner-position".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|inner_size".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-inner-size".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|internal_toggle_maximize".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-internal-toggle-maximize".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_closable".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-closable".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_decorated".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-decorated".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_enabled".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-enabled".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_focused".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-focused".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_fullscreen".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-fullscreen".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_maximizable".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-maximizable".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_maximized".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-maximized".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_minimizable".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-minimizable".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_minimized".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-minimized".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_resizable".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-resizable".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|is_visible".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-is-visible".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|monitor_from_point".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-monitor-from-point".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|outer_position".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-outer-position".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|outer_size".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-outer-size".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|primary_monitor".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-primary-monitor".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|scale_factor".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-scale-factor".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|theme".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-theme".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map.insert(
                                            "plugin:window|title".into(),
                                            <[_]>::into_vec(
                                                #[rustc_box]
                                                ::alloc::boxed::Box::new([
                                                    ::tauri::utils::acl::resolved::ResolvedCommand {
                                                        context: ::tauri::utils::acl::ExecutionContext::Local,
                                                        referenced_by: ::tauri::utils::acl::resolved::ResolvedCommandReference {
                                                            capability: "default".into(),
                                                            permission: "allow-title".into(),
                                                        },
                                                        windows: <[_]>::into_vec(
                                                            #[rustc_box]
                                                            ::alloc::boxed::Box::new(["main".parse().unwrap()]),
                                                        ),
                                                        webviews: ::alloc::vec::Vec::new(),
                                                        scope_id: ::core::option::Option::None,
                                                    },
                                                ]),
                                            ),
                                        );
                                        map
                                    },
                                    denied_commands: ::std::collections::BTreeMap::new(),
                                    command_scope: ::std::collections::BTreeMap::new(),
                                    global_scope: ::std::collections::BTreeMap::new(),
                                },
                            ),
                            ::std::option::Option::None,
                        );
                        {
                            context
                                .with_config_parent("/home/mats/TauRPC/example/src-tauri");
                        }
                        context
                    })
                    .expect("unable to create thread with 8MiB stack");
                match thread.join() {
                    Ok(context) => context,
                    Err(_) => {
                        {
                            ::std::io::_eprint(
                                format_args!(
                                    "the generated Tauri `Context` panicked during creation\n",
                                ),
                            );
                        };
                        ::std::process::exit(101);
                    }
                }
            })
            .expect("error while running tauri application");
    };
    #[allow(clippy::expect_used, clippy::diverging_sub_expression)]
    {
        return tokio::runtime::Builder::new_multi_thread()
            .enable_all()
            .build()
            .expect("Failed building the Runtime")
            .block_on(body);
    }
}
